// <auto-generated />
using System;
using Inventory.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Inventory.Migrations
{
    [DbContext(typeof(InventoryContext))]
    partial class InventoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5");

            modelBuilder.Entity("Inventory.Models.Item", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Vendorid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Vendorid");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Inventory.Models.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Vendorid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("itemAmount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("itemName")
                        .HasColumnType("TEXT");

                    b.Property<int>("status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("stockId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("submitDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("Vendorid");

                    b.HasIndex("stockId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Inventory.Models.Stock", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("count")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("inStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("itemName")
                        .HasColumnType("TEXT");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Inventory.Models.StockAlert", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("alertType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("itemName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("lowStockThreshold")
                        .HasColumnType("INTEGER");

                    b.Property<int>("stockId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("triggered")
                        .HasColumnType("INTEGER");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("stockId");

                    b.ToTable("StockAlert");
                });

            modelBuilder.Entity("Inventory.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("pwHash")
                        .HasColumnType("BLOB");

                    b.Property<string>("sessionID")
                        .HasColumnType("TEXT");

                    b.Property<string>("userName")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Inventory.Models.Vendor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("address")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("phone")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Inventory.Models.Item", b =>
                {
                    b.HasOne("Inventory.Models.Vendor", null)
                        .WithMany("items")
                        .HasForeignKey("Vendorid");
                });

            modelBuilder.Entity("Inventory.Models.Order", b =>
                {
                    b.HasOne("Inventory.Models.Vendor", null)
                        .WithMany("orders")
                        .HasForeignKey("Vendorid");

                    b.HasOne("Inventory.Models.Stock", "stock")
                        .WithMany()
                        .HasForeignKey("stockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inventory.Models.StockAlert", b =>
                {
                    b.HasOne("Inventory.Models.Stock", "stock")
                        .WithMany()
                        .HasForeignKey("stockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
